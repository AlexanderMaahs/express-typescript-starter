"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const bcrypt = require("bcrypt-nodejs");
const crypto = require("crypto");
const mongoose = require("mongoose");
let userSchema = new mongoose.Schema({
    email: { type: String, unique: true },
    password: String,
    passwordResetToken: String,
    passwordResetExpires: Date,
    facebook: String,
    twitter: String,
    google: String,
    tokens: Array,
    profile: {
        name: String,
        gender: String,
        location: String,
        website: String,
        picture: String
    }
}, { timestamps: true });
/**
 * Password hash middleware.
 */
userSchema.pre('save', function save(next) {
    const user = this;
    if (!user.isModified('password')) {
        return next();
    }
    bcrypt.genSalt(10, (err, salt) => {
        if (err) {
            return next(err);
        }
        bcrypt.hash(user.password, salt, null, (err, hash) => {
            if (err) {
                return next(err);
            }
            user.password = hash;
            next();
        });
    });
});
userSchema.methods.comparePassword = function (candidatePassword, cb) {
    bcrypt.compare(candidatePassword, this.password, (err, isMatch) => {
        cb(err, isMatch);
    });
};
/**
 * Helper method for getting user's gravatar.
 */
userSchema.methods.gravatar = function (size) {
    if (!size) {
        size = 200;
    }
    if (!this.email) {
        return `https://gravatar.com/avatar/?s=${size}&d=retro`;
    }
    const md5 = crypto.createHash('md5').update(this.email).digest('hex');
    return `https://gravatar.com/avatar/${md5}?s=${size}&d=retro`;
};
//export const User: UserType = mongoose.model<UserType>('User', userSchema);
const User = mongoose.model('User', userSchema);
exports.default = User;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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aEUsQ0FBQyxDQUFDO0FBRUYsNkVBQTZFO0FBQzdFLE1BQU0sSUFBSSxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBQ2hELGtCQUFlLElBQUksQ0FBQyIsImZpbGUiOiJtb2RlbHMvVXNlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGJjcnlwdCBmcm9tICdiY3J5cHQtbm9kZWpzJztcclxuaW1wb3J0ICogYXMgY3J5cHRvIGZyb20gJ2NyeXB0byc7XHJcbmltcG9ydCAqIGFzIG1vbmdvb3NlIGZyb20gJ21vbmdvb3NlJztcclxuXHJcbmV4cG9ydCB0eXBlIFVzZXJNb2RlbCA9IG1vbmdvb3NlLkRvY3VtZW50ICYge1xyXG4gIGVtYWlsOiBzdHJpbmcsXHJcbiAgcGFzc3dvcmQ6IHN0cmluZyxcclxuICBwYXNzd29yZFJlc2V0VG9rZW46IHN0cmluZyxcclxuICBwYXNzd29yZFJlc2V0RXhwaXJlczogRGF0ZSxcclxuXHJcbiAgZmFjZWJvb2s6IHN0cmluZyxcclxuICB0b2tlbnM6IEF1dGhUb2tlbltdLFxyXG5cclxuICBwcm9maWxlOiB7XHJcbiAgICBuYW1lOiBzdHJpbmcsXHJcbiAgICBnZW5kZXI6IHN0cmluZyxcclxuICAgIGxvY2F0aW9uOiBzdHJpbmcsXHJcbiAgICB3ZWJzaXRlOiBzdHJpbmcsXHJcbiAgICBwaWN0dXJlOiBzdHJpbmdcclxuICB9LFxyXG5cclxuICBjb21wYXJlUGFzc3dvcmQ6IChjYW5kaWRhdGVQYXNzd29yZDogc3RyaW5nLCBjYjogKGVycjogYW55LCBpc01hdGNoOiBhbnkpID0+IHt9KSA9PiB2b2lkLFxyXG4gIGdyYXZhdGFyOiAoc2l6ZTogbnVtYmVyKSA9PiBzdHJpbmdcclxufVxyXG5cclxuZXhwb3J0IHR5cGUgQXV0aFRva2VuID0ge1xyXG4gIGFjY2Vzc1Rva2VuOiBzdHJpbmcsXHJcbiAga2luZDogc3RyaW5nXHJcbn1cclxuXHJcbmxldCB1c2VyU2NoZW1hID0gbmV3IG1vbmdvb3NlLlNjaGVtYSh7XHJcbiAgZW1haWw6IHsgdHlwZTogU3RyaW5nLCB1bmlxdWU6IHRydWUgfSxcclxuICBwYXNzd29yZDogU3RyaW5nLFxyXG4gIHBhc3N3b3JkUmVzZXRUb2tlbjogU3RyaW5nLFxyXG4gIHBhc3N3b3JkUmVzZXRFeHBpcmVzOiBEYXRlLFxyXG5cclxuICBmYWNlYm9vazogU3RyaW5nLFxyXG4gIHR3aXR0ZXI6IFN0cmluZyxcclxuICBnb29nbGU6IFN0cmluZyxcclxuICB0b2tlbnM6IEFycmF5LFxyXG5cclxuICBwcm9maWxlOiB7XHJcbiAgICBuYW1lOiBTdHJpbmcsXHJcbiAgICBnZW5kZXI6IFN0cmluZyxcclxuICAgIGxvY2F0aW9uOiBTdHJpbmcsXHJcbiAgICB3ZWJzaXRlOiBTdHJpbmcsXHJcbiAgICBwaWN0dXJlOiBTdHJpbmdcclxuICB9XHJcbn0sIHsgdGltZXN0YW1wczogdHJ1ZSB9KTtcclxuXHJcbi8qKlxyXG4gKiBQYXNzd29yZCBoYXNoIG1pZGRsZXdhcmUuXHJcbiAqL1xyXG51c2VyU2NoZW1hLnByZSgnc2F2ZScsIGZ1bmN0aW9uIHNhdmUobmV4dCkge1xyXG4gIGNvbnN0IHVzZXIgPSB0aGlzO1xyXG4gIGlmICghdXNlci5pc01vZGlmaWVkKCdwYXNzd29yZCcpKSB7IHJldHVybiBuZXh0KCk7IH1cclxuICBiY3J5cHQuZ2VuU2FsdCgxMCwgKGVyciwgc2FsdCkgPT4ge1xyXG4gICAgaWYgKGVycikgeyByZXR1cm4gbmV4dChlcnIpOyB9XHJcbiAgICBiY3J5cHQuaGFzaCh1c2VyLnBhc3N3b3JkLCBzYWx0LCBudWxsLCAoZXJyOiBtb25nb29zZS5FcnJvciwgaGFzaCkgPT4ge1xyXG4gICAgICBpZiAoZXJyKSB7IHJldHVybiBuZXh0KGVycik7IH1cclxuICAgICAgdXNlci5wYXNzd29yZCA9IGhhc2g7XHJcbiAgICAgIG5leHQoKTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG59KTtcclxuXHJcbnVzZXJTY2hlbWEubWV0aG9kcy5jb21wYXJlUGFzc3dvcmQgPSBmdW5jdGlvbihjYW5kaWRhdGVQYXNzd29yZDogc3RyaW5nLCBjYjogKGVycjogYW55LCBpc01hdGNoOiBhbnkpID0+IHt9KSB7XHJcbiAgYmNyeXB0LmNvbXBhcmUoY2FuZGlkYXRlUGFzc3dvcmQsIHRoaXMucGFzc3dvcmQsIChlcnI6IG1vbmdvb3NlLkVycm9yICwgaXNNYXRjaDogYm9vbGVhbikgPT4ge1xyXG4gICAgY2IoZXJyLCBpc01hdGNoKTtcclxuICB9KTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogSGVscGVyIG1ldGhvZCBmb3IgZ2V0dGluZyB1c2VyJ3MgZ3JhdmF0YXIuXHJcbiAqL1xyXG51c2VyU2NoZW1hLm1ldGhvZHMuZ3JhdmF0YXIgPSBmdW5jdGlvbihzaXplOiBudW1iZXIpIHtcclxuICBpZiAoIXNpemUpIHtcclxuICAgIHNpemUgPSAyMDA7XHJcbiAgfVxyXG4gIGlmICghdGhpcy5lbWFpbCkge1xyXG4gICAgcmV0dXJuIGBodHRwczovL2dyYXZhdGFyLmNvbS9hdmF0YXIvP3M9JHtzaXplfSZkPXJldHJvYDtcclxuICB9XHJcbiAgY29uc3QgbWQ1ID0gY3J5cHRvLmNyZWF0ZUhhc2goJ21kNScpLnVwZGF0ZSh0aGlzLmVtYWlsKS5kaWdlc3QoJ2hleCcpO1xyXG4gIHJldHVybiBgaHR0cHM6Ly9ncmF2YXRhci5jb20vYXZhdGFyLyR7bWQ1fT9zPSR7c2l6ZX0mZD1yZXRyb2A7XHJcbn07XHJcblxyXG4vL2V4cG9ydCBjb25zdCBVc2VyOiBVc2VyVHlwZSA9IG1vbmdvb3NlLm1vZGVsPFVzZXJUeXBlPignVXNlcicsIHVzZXJTY2hlbWEpO1xyXG5jb25zdCBVc2VyID0gbW9uZ29vc2UubW9kZWwoJ1VzZXInLCB1c2VyU2NoZW1hKTtcclxuZXhwb3J0IGRlZmF1bHQgVXNlcjtcclxuIl19
