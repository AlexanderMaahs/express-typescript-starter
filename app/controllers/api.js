'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const graph = require("fbgraph");
const twilio = require("twilio");
const Twilio = twilio(process.env.TWILIO_SID, process.env.TWILIO_TOKEN);
/**
 * GET /api
 * List of API examples.
 */
exports.getApi = (req, res) => {
    res.render('api/index', {
        title: 'API Examples'
    });
};
/**
 * GET /api/facebook
 * Facebook API example.
 */
exports.getFacebook = (req, res, next) => {
    const token = req.user.tokens.find((token) => token.kind === 'facebook');
    graph.setAccessToken(token.accessToken);
    graph.get(`${req.user.facebook}?fields=id,name,email,first_name,last_name,gender,link,locale,timezone`, (err, results) => {
        if (err) {
            return next(err);
        }
        res.render('api/facebook', {
            title: 'Facebook API',
            profile: results
        });
    });
};
/**
 * GET /api/twilio
 * Twilio API example.
 */
exports.getTwilio = (req, res) => {
    res.render('api/twilio', {
        title: 'Twilio API'
    });
};
/**
 * POST /api/twilio
 * Send a text message using Twilio.
 */
exports.postTwilio = (req, res, next) => {
    req.assert('number', 'Phone number is required.').notEmpty();
    req.assert('message', 'Message cannot be blank.').notEmpty();
    const errors = req.validationErrors();
    if (errors) {
        req.flash('errors', errors);
        return res.redirect('/api/twilio');
    }
    const message = {
        to: req.body.number,
        from: '+13472235148',
        body: req.body.message
    };
    Twilio.sendMessage(message, (err, responseData) => {
        if (err) {
            return next(err.message);
        }
        req.flash('success', { msg: `Text sent to ${responseData.to}.` });
        res.redirect('/api/twilio');
    });
};

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jb250cm9sbGVycy9hcGkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDOztBQUliLGlDQUFpQztBQUNqQyxpQ0FBaUM7QUFJakMsTUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLENBQUM7QUFFeEU7OztHQUdHO0FBQ1EsUUFBQSxNQUFNLEdBQUcsQ0FBQyxHQUFZLEVBQUUsR0FBYTtJQUM5QyxHQUFHLENBQUMsTUFBTSxDQUFDLFdBQVcsRUFBRTtRQUN0QixLQUFLLEVBQUUsY0FBYztLQUN0QixDQUFDLENBQUM7QUFDTCxDQUFDLENBQUM7QUFFRjs7O0dBR0c7QUFDUSxRQUFBLFdBQVcsR0FBRyxDQUFDLEdBQVksRUFBRSxHQUFhLEVBQUUsSUFBa0I7SUFDdkUsTUFBTSxLQUFLLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBVSxLQUFLLEtBQUssQ0FBQyxJQUFJLEtBQUssVUFBVSxDQUFDLENBQUM7SUFDOUUsS0FBSyxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDeEMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSx3RUFBd0UsRUFBRSxDQUFDLEdBQVUsRUFBRSxPQUEyQjtRQUM5SSxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUFDLENBQUM7UUFDOUIsR0FBRyxDQUFDLE1BQU0sQ0FBQyxjQUFjLEVBQUU7WUFDekIsS0FBSyxFQUFFLGNBQWM7WUFDckIsT0FBTyxFQUFFLE9BQU87U0FDakIsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUM7QUFFRjs7O0dBR0c7QUFDUSxRQUFBLFNBQVMsR0FBRyxDQUFDLEdBQVksRUFBRSxHQUFhO0lBQ2pELEdBQUcsQ0FBQyxNQUFNLENBQUMsWUFBWSxFQUFFO1FBQ3ZCLEtBQUssRUFBRSxZQUFZO0tBQ3BCLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQztBQUVGOzs7R0FHRztBQUNRLFFBQUEsVUFBVSxHQUFHLENBQUMsR0FBWSxFQUFFLEdBQWEsRUFBRSxJQUFrQjtJQUN0RSxHQUFHLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSwyQkFBMkIsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQzdELEdBQUcsQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFLDBCQUEwQixDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7SUFFN0QsTUFBTSxNQUFNLEdBQUcsR0FBRyxDQUFDLGdCQUFnQixFQUFFLENBQUM7SUFFdEMsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztRQUNYLEdBQUcsQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQzVCLE1BQU0sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQ3JDLENBQUM7SUFFRCxNQUFNLE9BQU8sR0FBRztRQUNkLEVBQUUsRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU07UUFDbkIsSUFBSSxFQUFFLGNBQWM7UUFDcEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTztLQUN2QixDQUFDO0lBQ0YsTUFBTSxDQUFDLFdBQVcsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxHQUFHLEVBQUUsWUFBWTtRQUM1QyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7UUFBQyxDQUFDO1FBQ3RDLEdBQUcsQ0FBQyxLQUFLLENBQUMsU0FBUyxFQUFFLEVBQUUsR0FBRyxFQUFFLGdCQUFnQixZQUFZLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO1FBQ2xFLEdBQUcsQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDOUIsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMiLCJmaWxlIjoiY29udHJvbGxlcnMvYXBpLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xyXG5cclxuaW1wb3J0ICogYXMgYXN5bmMgZnJvbSAnYXN5bmMnO1xyXG5pbXBvcnQgKiBhcyByZXF1ZXN0IGZyb20gJ3JlcXVlc3QnO1xyXG5pbXBvcnQgKiBhcyBncmFwaCBmcm9tICdmYmdyYXBoJztcclxuaW1wb3J0ICogYXMgdHdpbGlvIGZyb20gJ3R3aWxpbyc7XHJcbmltcG9ydCB7UmVzcG9uc2UsIFJlcXVlc3QsIE5leHRGdW5jdGlvbn0gZnJvbSAnZXhwcmVzcyc7XHJcblxyXG5cclxuY29uc3QgVHdpbGlvID0gdHdpbGlvKHByb2Nlc3MuZW52LlRXSUxJT19TSUQsIHByb2Nlc3MuZW52LlRXSUxJT19UT0tFTik7XHJcblxyXG4vKipcclxuICogR0VUIC9hcGlcclxuICogTGlzdCBvZiBBUEkgZXhhbXBsZXMuXHJcbiAqL1xyXG5leHBvcnQgdmFyIGdldEFwaSA9IChyZXE6IFJlcXVlc3QsIHJlczogUmVzcG9uc2UpID0+IHtcclxuICByZXMucmVuZGVyKCdhcGkvaW5kZXgnLCB7XHJcbiAgICB0aXRsZTogJ0FQSSBFeGFtcGxlcydcclxuICB9KTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBHRVQgL2FwaS9mYWNlYm9va1xyXG4gKiBGYWNlYm9vayBBUEkgZXhhbXBsZS5cclxuICovXHJcbmV4cG9ydCB2YXIgZ2V0RmFjZWJvb2sgPSAocmVxOiBSZXF1ZXN0LCByZXM6IFJlc3BvbnNlLCBuZXh0OiBOZXh0RnVuY3Rpb24pID0+IHtcclxuICBjb25zdCB0b2tlbiA9IHJlcS51c2VyLnRva2Vucy5maW5kKCh0b2tlbjogYW55KSA9PiB0b2tlbi5raW5kID09PSAnZmFjZWJvb2snKTtcclxuICBncmFwaC5zZXRBY2Nlc3NUb2tlbih0b2tlbi5hY2Nlc3NUb2tlbik7XHJcbiAgZ3JhcGguZ2V0KGAke3JlcS51c2VyLmZhY2Vib29rfT9maWVsZHM9aWQsbmFtZSxlbWFpbCxmaXJzdF9uYW1lLGxhc3RfbmFtZSxnZW5kZXIsbGluayxsb2NhbGUsdGltZXpvbmVgLCAoZXJyOiBFcnJvciwgcmVzdWx0czogZ3JhcGguRmFjZWJvb2tVc2VyKSA9PiB7XHJcbiAgICBpZiAoZXJyKSB7IHJldHVybiBuZXh0KGVycik7IH1cclxuICAgIHJlcy5yZW5kZXIoJ2FwaS9mYWNlYm9vaycsIHtcclxuICAgICAgdGl0bGU6ICdGYWNlYm9vayBBUEknLFxyXG4gICAgICBwcm9maWxlOiByZXN1bHRzXHJcbiAgICB9KTtcclxuICB9KTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBHRVQgL2FwaS90d2lsaW9cclxuICogVHdpbGlvIEFQSSBleGFtcGxlLlxyXG4gKi9cclxuZXhwb3J0IHZhciBnZXRUd2lsaW8gPSAocmVxOiBSZXF1ZXN0LCByZXM6IFJlc3BvbnNlKSA9PiB7XHJcbiAgcmVzLnJlbmRlcignYXBpL3R3aWxpbycsIHtcclxuICAgIHRpdGxlOiAnVHdpbGlvIEFQSSdcclxuICB9KTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBQT1NUIC9hcGkvdHdpbGlvXHJcbiAqIFNlbmQgYSB0ZXh0IG1lc3NhZ2UgdXNpbmcgVHdpbGlvLlxyXG4gKi9cclxuZXhwb3J0IHZhciBwb3N0VHdpbGlvID0gKHJlcTogUmVxdWVzdCwgcmVzOiBSZXNwb25zZSwgbmV4dDogTmV4dEZ1bmN0aW9uKSA9PiB7XHJcbiAgcmVxLmFzc2VydCgnbnVtYmVyJywgJ1Bob25lIG51bWJlciBpcyByZXF1aXJlZC4nKS5ub3RFbXB0eSgpO1xyXG4gIHJlcS5hc3NlcnQoJ21lc3NhZ2UnLCAnTWVzc2FnZSBjYW5ub3QgYmUgYmxhbmsuJykubm90RW1wdHkoKTtcclxuXHJcbiAgY29uc3QgZXJyb3JzID0gcmVxLnZhbGlkYXRpb25FcnJvcnMoKTtcclxuXHJcbiAgaWYgKGVycm9ycykge1xyXG4gICAgcmVxLmZsYXNoKCdlcnJvcnMnLCBlcnJvcnMpO1xyXG4gICAgcmV0dXJuIHJlcy5yZWRpcmVjdCgnL2FwaS90d2lsaW8nKTtcclxuICB9XHJcblxyXG4gIGNvbnN0IG1lc3NhZ2UgPSB7XHJcbiAgICB0bzogcmVxLmJvZHkubnVtYmVyLFxyXG4gICAgZnJvbTogJysxMzQ3MjIzNTE0OCcsXHJcbiAgICBib2R5OiByZXEuYm9keS5tZXNzYWdlXHJcbiAgfTtcclxuICBUd2lsaW8uc2VuZE1lc3NhZ2UobWVzc2FnZSwgKGVyciwgcmVzcG9uc2VEYXRhKSA9PiB7XHJcbiAgICBpZiAoZXJyKSB7IHJldHVybiBuZXh0KGVyci5tZXNzYWdlKTsgfVxyXG4gICAgcmVxLmZsYXNoKCdzdWNjZXNzJywgeyBtc2c6IGBUZXh0IHNlbnQgdG8gJHtyZXNwb25zZURhdGEudG99LmAgfSk7XHJcbiAgICByZXMucmVkaXJlY3QoJy9hcGkvdHdpbGlvJyk7XHJcbiAgfSk7XHJcbn07XHJcblxyXG4iXX0=
