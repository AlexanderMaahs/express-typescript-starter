"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const nodemailer = require("nodemailer");
const transporter = nodemailer.createTransport({
    service: 'SendGrid',
    auth: {
        user: process.env.SENDGRID_USER,
        pass: process.env.SENDGRID_PASSWORD
    }
});
/**
 * GET /contact
 * Contact form page.
 */
exports.getContact = (req, res) => {
    res.render('contact', {
        title: 'Contact'
    });
};
/**
 * POST /contact
 * Send a contact form via Nodemailer.
 */
exports.postContact = (req, res) => {
    req.assert('name', 'Name cannot be blank').notEmpty();
    req.assert('email', 'Email is not valid').isEmail();
    req.assert('message', 'Message cannot be blank').notEmpty();
    const errors = req.validationErrors();
    if (errors) {
        req.flash('errors', errors);
        return res.redirect('/contact');
    }
    const mailOptions = {
        to: 'your@email.com',
        from: `${req.body.name} <${req.body.email}>`,
        subject: 'Contact Form | Hackathon Starter',
        text: req.body.message
    };
    transporter.sendMail(mailOptions, (err) => {
        if (err) {
            req.flash('errors', { msg: err.message });
            return res.redirect('/contact');
        }
        req.flash('success', { msg: 'Email has been sent successfully!' });
        res.redirect('/contact');
    });
};

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jb250cm9sbGVycy9jb250YWN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEseUNBQXlDO0FBR3pDLE1BQU0sV0FBVyxHQUFHLFVBQVUsQ0FBQyxlQUFlLENBQUM7SUFDN0MsT0FBTyxFQUFFLFVBQVU7SUFDbkIsSUFBSSxFQUFFO1FBQ0osSUFBSSxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsYUFBYTtRQUMvQixJQUFJLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUI7S0FDcEM7Q0FDRixDQUFDLENBQUM7QUFFSDs7O0dBR0c7QUFDUSxRQUFBLFVBQVUsR0FBRyxDQUFDLEdBQVksRUFBRSxHQUFhO0lBQ2xELEdBQUcsQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFO1FBQ3BCLEtBQUssRUFBRSxTQUFTO0tBQ2pCLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQztBQUVGOzs7R0FHRztBQUNRLFFBQUEsV0FBVyxHQUFHLENBQUMsR0FBWSxFQUFFLEdBQWE7SUFDbkQsR0FBRyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsc0JBQXNCLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUN0RCxHQUFHLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxvQkFBb0IsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ3BELEdBQUcsQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFLHlCQUF5QixDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7SUFFNUQsTUFBTSxNQUFNLEdBQUcsR0FBRyxDQUFDLGdCQUFnQixFQUFFLENBQUM7SUFFdEMsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztRQUNYLEdBQUcsQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQzVCLE1BQU0sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ2xDLENBQUM7SUFFRCxNQUFNLFdBQVcsR0FBRztRQUNsQixFQUFFLEVBQUUsZ0JBQWdCO1FBQ3BCLElBQUksRUFBRSxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxLQUFLLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxHQUFHO1FBQzVDLE9BQU8sRUFBRSxrQ0FBa0M7UUFDM0MsSUFBSSxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTztLQUN2QixDQUFDO0lBRUYsV0FBVyxDQUFDLFFBQVEsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxHQUFHO1FBQ3BDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDUixHQUFHLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztZQUMxQyxNQUFNLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNsQyxDQUFDO1FBQ0QsR0FBRyxDQUFDLEtBQUssQ0FBQyxTQUFTLEVBQUUsRUFBRSxHQUFHLEVBQUUsbUNBQW1DLEVBQUUsQ0FBQyxDQUFDO1FBQ25FLEdBQUcsQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDM0IsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMiLCJmaWxlIjoiY29udHJvbGxlcnMvY29udGFjdC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIG5vZGVtYWlsZXIgZnJvbSAnbm9kZW1haWxlcic7XHJcbmltcG9ydCB7UmVxdWVzdCwgUmVzcG9uc2V9IGZyb20gJ2V4cHJlc3MnO1xyXG5cclxuY29uc3QgdHJhbnNwb3J0ZXIgPSBub2RlbWFpbGVyLmNyZWF0ZVRyYW5zcG9ydCh7XHJcbiAgc2VydmljZTogJ1NlbmRHcmlkJyxcclxuICBhdXRoOiB7XHJcbiAgICB1c2VyOiBwcm9jZXNzLmVudi5TRU5ER1JJRF9VU0VSLFxyXG4gICAgcGFzczogcHJvY2Vzcy5lbnYuU0VOREdSSURfUEFTU1dPUkRcclxuICB9XHJcbn0pO1xyXG5cclxuLyoqXHJcbiAqIEdFVCAvY29udGFjdFxyXG4gKiBDb250YWN0IGZvcm0gcGFnZS5cclxuICovXHJcbmV4cG9ydCB2YXIgZ2V0Q29udGFjdCA9IChyZXE6IFJlcXVlc3QsIHJlczogUmVzcG9uc2UpID0+IHtcclxuICByZXMucmVuZGVyKCdjb250YWN0Jywge1xyXG4gICAgdGl0bGU6ICdDb250YWN0J1xyXG4gIH0pO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFBPU1QgL2NvbnRhY3RcclxuICogU2VuZCBhIGNvbnRhY3QgZm9ybSB2aWEgTm9kZW1haWxlci5cclxuICovXHJcbmV4cG9ydCB2YXIgcG9zdENvbnRhY3QgPSAocmVxOiBSZXF1ZXN0LCByZXM6IFJlc3BvbnNlKSA9PiB7XHJcbiAgcmVxLmFzc2VydCgnbmFtZScsICdOYW1lIGNhbm5vdCBiZSBibGFuaycpLm5vdEVtcHR5KCk7XHJcbiAgcmVxLmFzc2VydCgnZW1haWwnLCAnRW1haWwgaXMgbm90IHZhbGlkJykuaXNFbWFpbCgpO1xyXG4gIHJlcS5hc3NlcnQoJ21lc3NhZ2UnLCAnTWVzc2FnZSBjYW5ub3QgYmUgYmxhbmsnKS5ub3RFbXB0eSgpO1xyXG5cclxuICBjb25zdCBlcnJvcnMgPSByZXEudmFsaWRhdGlvbkVycm9ycygpO1xyXG5cclxuICBpZiAoZXJyb3JzKSB7XHJcbiAgICByZXEuZmxhc2goJ2Vycm9ycycsIGVycm9ycyk7XHJcbiAgICByZXR1cm4gcmVzLnJlZGlyZWN0KCcvY29udGFjdCcpO1xyXG4gIH1cclxuXHJcbiAgY29uc3QgbWFpbE9wdGlvbnMgPSB7XHJcbiAgICB0bzogJ3lvdXJAZW1haWwuY29tJyxcclxuICAgIGZyb206IGAke3JlcS5ib2R5Lm5hbWV9IDwke3JlcS5ib2R5LmVtYWlsfT5gLFxyXG4gICAgc3ViamVjdDogJ0NvbnRhY3QgRm9ybSB8IEhhY2thdGhvbiBTdGFydGVyJyxcclxuICAgIHRleHQ6IHJlcS5ib2R5Lm1lc3NhZ2VcclxuICB9O1xyXG5cclxuICB0cmFuc3BvcnRlci5zZW5kTWFpbChtYWlsT3B0aW9ucywgKGVycikgPT4ge1xyXG4gICAgaWYgKGVycikge1xyXG4gICAgICByZXEuZmxhc2goJ2Vycm9ycycsIHsgbXNnOiBlcnIubWVzc2FnZSB9KTtcclxuICAgICAgcmV0dXJuIHJlcy5yZWRpcmVjdCgnL2NvbnRhY3QnKTtcclxuICAgIH1cclxuICAgIHJlcS5mbGFzaCgnc3VjY2VzcycsIHsgbXNnOiAnRW1haWwgaGFzIGJlZW4gc2VudCBzdWNjZXNzZnVsbHkhJyB9KTtcclxuICAgIHJlcy5yZWRpcmVjdCgnL2NvbnRhY3QnKTtcclxuICB9KTtcclxufTtcclxuIl19
